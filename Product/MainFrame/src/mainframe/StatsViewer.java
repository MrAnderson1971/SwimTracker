/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainframe;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.DoubleStream;
import javax.swing.JTable;
import javax.swing.JTextField;

/**
 *
 * @author Hello there!
 */
public class StatsViewer extends javax.swing.JFrame
{

    private static ArrayList<Double> allTimes;
    public static double[] allData;
    private static boolean hasCustomValue;

    public static double[] freestyle100;
    public static double[] backstroke50;
    public static double[] backstroke100;
    public static double[] breaststroke50;
    public static double[] butterfly50;

    private static ArrayList<Double> _freestyle100;
    private static ArrayList<Double> _backstroke50;
    private static ArrayList<Double> _backstroke100;
    private static ArrayList<Double> _breaststroke50;
    private static ArrayList<Double> _butterfly50;

    public StatsViewer()
    {
        hasCustomValue = false;
        allTimes = new ArrayList<>();
        File folder = new File("./data"); // Collect all data associated with profile, then store them in an array.
        File[] listOfFiles = folder.listFiles();
        for (File f : listOfFiles)
        {
            try
            {
                String fileName = f.getName().replaceAll(".csv", "");
                if (DataManager.getDateData(fileName).containsKey(ProfileSelection.selectedProfile))
                {
                    DataManager.getDateData(fileName).get(ProfileSelection.selectedProfile).stream().forEach((d) ->
                    {
                        if (d == -1)
                        {
                            allTimes.add(null); // fill with null instead of empty to maintain arraylist structure
                        } else
                        {
                            allTimes.add(d);
                        }
                    });
                }
            } catch (Exception ex)
            {
                Logger.getLogger(DataManager.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        // initialize array lists
        _freestyle100 = new ArrayList<>();
        _backstroke50 = new ArrayList<>();
        _backstroke100 = new ArrayList<>();
        _breaststroke50 = new ArrayList<>();
        _butterfly50 = new ArrayList<>();

        for (int i = 0; i < allTimes.size(); i += 5) // fill each stroke type with corresponding element from alltimes
        {
            _freestyle100.add(allTimes.get(i));
            _backstroke50.add(allTimes.get(i + 1));
            _backstroke100.add(allTimes.get(i + 2));
            _breaststroke50.add(allTimes.get(i + 3));
            _butterfly50.add(allTimes.get(i + 4));
        }

        // remove all instances of null
        allTimes.removeAll(Collections.singleton(null));
        _freestyle100.removeAll(Collections.singleton(null));
        _backstroke50.removeAll(Collections.singleton(null));
        _backstroke100.removeAll(Collections.singleton(null));
        _breaststroke50.removeAll(Collections.singleton(null));
        _butterfly50.removeAll(Collections.singleton(null));

        // convert arraylist to arrays so it can be passed to stats
        allData = new double[allTimes.size()];
        freestyle100 = new double[_freestyle100.size()];
        backstroke50 = new double[_backstroke50.size()];
        backstroke100 = new double[_backstroke100.size()];
        breaststroke50 = new double[_breaststroke50.size()];
        butterfly50 = new double[_butterfly50.size()];

        listToArray(allTimes, allData);
        listToArray(_freestyle100, freestyle100);
        listToArray(_backstroke50, backstroke50);
        listToArray(_backstroke100, backstroke100);
        listToArray(_breaststroke50, breaststroke50);
        listToArray(_butterfly50, butterfly50);

        if (allData.length < 1) // if array is empty, go back
        {
            ProfileSelection.showWarningDialog("No data exists.");
            java.awt.EventQueue.invokeLater(() -> new DateSelection().setVisible(true));
            this.dispose();
            return;
        }

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jButtonBack = new javax.swing.JButton();
        jLabelProfile = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextFieldTest = new javax.swing.JTextField();
        jButtonUpdate = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableFreestyle100 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableBackstroke50 = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableButterfly50 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableBackstroke100 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableBreaststroke50 = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jButtonNext = new javax.swing.JButton();
        jLabelZScore = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonBack.setText("<-- Back");
        jButtonBack.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonBackActionPerformed(evt);
            }
        });

        jLabelProfile.setText(mainframe.ProfileSelection.selectedProfile.getName());

        /*
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"Mean", Stat.mean(allData)},
                {"Median", Stat.median(allData)},
                {"Mode", Stat.mode(allData)},
                {"Standard Deviation", Stat.popStandardDeviation(allData)},
                {"Max", Stat.max(allData)},
                {"Min", Stat.min(allData)},
                {"Range", Stat.range(allData)}
            },
            new String []
            {
                "Stat", "Value"
            }
        ));
        */
        generateTable(jTable1, allData);
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setText("Enter temporary test value:");

        jTextFieldTest.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyTyped(java.awt.event.KeyEvent evt)
            {
                jTextFieldTestKeyTyped(evt);
            }
        });
        setResizable(false);
        setTitle("View Statistics");

        jButtonUpdate.setText("Update");
        jButtonUpdate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonUpdateActionPerformed(evt);
            }
        });

        jLabel2.setText("Overview");

        jLabel3.setText("Freestyle 100");

        /*
        jTableFreestyle100.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String []
            {
                "Stat", "Value"
            }
        )
        {
            Class[] types = new Class []
            {
                java.lang.String.class, java.lang.Double.class
            };

            public Class getColumnClass(int columnIndex)
            {
                return types [columnIndex];
            }
        });
        */
        generateTable(jTableFreestyle100, freestyle100);
        jScrollPane2.setViewportView(jTableFreestyle100);

        jLabel4.setText(mainframe.ProfileSelection.selectedProfile.getAge() <= 12 ? "Backstroke 50" : "Backstroke 200");

        /*
        jTableBackstroke50.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String []
            {
                "Stat", "Value"
            }
        ));
        */
        generateTable(jTableBackstroke50, backstroke50);
        jScrollPane3.setViewportView(jTableBackstroke50);

        /*
        jTableButterfly50.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"Mean", Stat.mean(allData)},
                {"Median", Stat.median(allData)},
                {"Mode", Stat.mode(allData)},
                {"Standard Deviation", Stat.popStandardDeviation(allData)},
                {"Max", Stat.max(allData)},
                {"Min", Stat.min(allData)},
                {"Range", Stat.range(allData)}
            },
            new String []
            {
                "Stat", "Value"
            }
        ));
        */
        generateTable(jTableButterfly50, butterfly50);
        jScrollPane4.setViewportView(jTableButterfly50);

        /*
        jTableBackstroke100.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"Mean", Stat.mean(allData)},
                {"Median", Stat.median(allData)},
                {"Mode", Stat.mode(allData)},
                {"Standard Deviation", Stat.popStandardDeviation(allData)},
                {"Max", Stat.max(allData)},
                {"Min", Stat.min(allData)},
                {"Range", Stat.range(allData)}
            },
            new String []
            {
                "Stat", "Value"
            }
        ));
        */
        generateTable(jTableBackstroke100, backstroke100);
        jScrollPane5.setViewportView(jTableBackstroke100);

        jLabel5.setText(mainframe.ProfileSelection.selectedProfile.getAge() <= 12 ? "Breaststroke 50" : "Breaststroke 100");

        jLabel6.setText(mainframe.ProfileSelection.selectedProfile.getAge() <= 12 ? "Butterfly 50" : "Butterfly 100");

        /*
        jTableBreaststroke50.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {"Mean", Stat.mean(allData)},
                {"Median", Stat.median(allData)},
                {"Mode", Stat.mode(allData)},
                {"Standard Deviation", Stat.popStandardDeviation(allData)},
                {"Max", Stat.max(allData)},
                {"Min", Stat.min(allData)},
                {"Range", Stat.range(allData)}
            },
            new String []
            {
                "Stat", "Value"
            }
        ));
        */

        generateTable(jTableBreaststroke50, breaststroke50);
        jScrollPane6.setViewportView(jTableBreaststroke50);

        jLabel7.setText("Backstroke 100");

        jButtonNext.setText("Next Page -->");
        jButtonNext.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButtonNextActionPerformed(evt);
            }
        });

        jLabelZScore.setText("Z-score:");
        jLabelZScore.setVisible(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5)
                                .addGap(265, 265, 265))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonBack, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(104, 104, 104)
                                .addComponent(jLabelProfile))
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(281, 281, 281)
                                .addComponent(jLabel4))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldTest, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabelZScore)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonNext, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonBack)
                            .addComponent(jLabelProfile))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTextFieldTest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButtonUpdate)
                            .addComponent(jButtonNext)
                            .addComponent(jLabelZScore))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4))
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(20, 20, 20)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBackActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonBackActionPerformed
    {//GEN-HEADEREND:event_jButtonBackActionPerformed
        java.awt.EventQueue.invokeLater(() -> new DateSelection().setVisible(true));
        this.dispose();
    }//GEN-LAST:event_jButtonBackActionPerformed

    private void jTextFieldTestKeyTyped(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextFieldTestKeyTyped
    {//GEN-HEADEREND:event_jTextFieldTestKeyTyped
        char c = evt.getKeyChar();
        if (!(Character.isDigit(c)) && c != '.')
        {
            evt.consume();
        }

        JTextField j = (JTextField) evt.getComponent();
        if (c == '.' && (j.getText().length() < 1 || DateEditor.charFreq('.', j.getText()) > 0))
        {
            evt.consume();
        }
    }//GEN-LAST:event_jTextFieldTestKeyTyped

    private void jButtonUpdateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonUpdateActionPerformed
    {//GEN-HEADEREND:event_jButtonUpdateActionPerformed
        if (jTextFieldTest.getText().length() < 1)
        {
            return;
        }
        if (hasCustomValue)
        {
            // if user has already inputed custom value, change the last value of the list instead of adding a new one
            allTimes.set(allTimes.size() - 1, DateEditor.parseDouble(jTextFieldTest.getText()));
        } else
        {
            // add to list first time user clicks button
            hasCustomValue = true;
            allTimes.add(DateEditor.parseDouble(jTextFieldTest.getText()));
        }
        allData = new double[allTimes.size()];
        for (int i = 0; i < allData.length; i++)
        {
            allData[i] = allTimes.get(i);
        }

        // calculate and display z-score of test value
        jLabelZScore.setVisible(true);
        jLabelZScore.setText("Z-score: " + Stat.zScore(allTimes.get(allTimes.size() - 1), allData));
        generateTable(jTable1, allData);
    }//GEN-LAST:event_jButtonUpdateActionPerformed

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonNextActionPerformed
    {//GEN-HEADEREND:event_jButtonNextActionPerformed
        java.awt.EventQueue.invokeLater(() ->
        {
            try
            {
                new NationalStandards().setVisible(true);
            } catch (FileNotFoundException ex)
            {
                Logger.getLogger(StatsViewer.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        this.dispose();
    }//GEN-LAST:event_jButtonNextActionPerformed

    /**
     * Sets table configuration.
     *
     * @param table
     */
    private void generateTable(JTable table, double[] m)
    {
        try
        {
            table.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]
                    {
                        {
                            "Mean", Stat.mean(m)
                        },
                        {
                            "Median", Stat.median(m)
                        },
                        {
                            "Mode", Stat.mode(m)
                        },
                        {
                            "Standard Deviation", Stat.popStandardDeviation(m)
                        },
                        {
                            "Max", Stat.max(m)
                        },
                        {
                            "Min", Stat.min(m)
                        },
                        {
                            "Range", Stat.range(m)
                        },
                        {
                            "Sum", DoubleStream.of(m).sum()
                        }
                    },
                    new String[]
                    {
                        "Stat", "Value"
                    }
            ));
        } catch (NullPointerException | ArrayIndexOutOfBoundsException e) // if arrays are empty, set cell to "no data"
        {
            /*for (int i = 0; i < table.getModel().getRowCount(); i++)
             {
             DefaultTableModel model = (DefaultTableModel) table.getModel();
             model.setValueAt("No data", i, 1);
             }*/
            table.setModel(new javax.swing.table.DefaultTableModel(
                    new Object[][]
                    {
                        {
                            "Mean", "No data"
                        },
                        {
                            "Median", "No data"
                        },
                        {
                            "Mode", "No data"
                        },
                        {
                            "Standard Deviation", "No data"
                        },
                        {
                            "Max", "No data"
                        },
                        {
                            "Min", "No data"
                        },
                        {
                            "Range", "No data"
                        },
                        {
                            "Sum", "No data"
                        }
                    },
                    new String[]
                    {
                        "Stat", "Value"
                    }
            ));
        }
    }

    /**
     * Takes all elements from list and stores them in array.
     *
     * @param list A list of doubles.
     * @param array This array is modified by the method.
     */
    public static void listToArray(ArrayList<Double> list, double[] array)
    {
        for (int i = 0; i < array.length; i++)
        {
            array[i] = list.get(i);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBack;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelProfile;
    private javax.swing.JLabel jLabelZScore;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTableBackstroke100;
    private javax.swing.JTable jTableBackstroke50;
    private javax.swing.JTable jTableBreaststroke50;
    private javax.swing.JTable jTableButterfly50;
    private javax.swing.JTable jTableFreestyle100;
    private javax.swing.JTextField jTextFieldTest;
    // End of variables declaration//GEN-END:variables
}
